
5.14 LAB: Count characters

Write a program whose input is a character and a string,
and whose output indicates the number of times the character appears in the string.
The output should include the input character and use the plural form, n's, 
if the number of times the characters appears is not exactly 1.
import java.util.Scanner;

public class ProgramSummary {
    public static void main(String[] args) {
        Scanner scnr = new Scanner(System.in);
        char targetChar = scnr.next().charAt(0);
        String inputString = scnr.nextLine();

        int count = 0;
        for (int i = 0; i < inputString.length(); i++) {
            if ( inputString.charAt(i)== targetChar) {
              count++;
            }
        }
        System.out.printf("%d %c%s%n", count, targetChar, (count != 1) ?"'s":"");
    }
}
5.15 LAB: Parsing dates

Complete main() to read dates from input, one date per line. Each date's format must be as follows: March 1, 1990. Any date not following that format is incorrect and should be ignored. Use the substring() method to parse the string and extract the date. The input ends with -1 on a line alone. Output each correct date as: 3-1-1990.

Ex: If the input is:

March 1, 1990
April 2 1995
7/15/20
December 13, 2003
-1

import java.util.Scanner;

public class DateParser {
    public static void main(String[] args) {
        // Prompt the user for dates
        Scanner scnr = new Scanner(System.in);

        String input = "";
        while (!input.equals("-1")) {
            input = scnr.nextLine();
            if (isValidDateFormat(input)) {
                String formattedDate = formatDate(input);
                System.out.println(formattedDate);
            }
        }
    }

    public static boolean isValidDateFormat(String date) {
        String[] dateParts = date.split(" ");
        if (dateParts.length != 3) {
            return false;
        }

        String month = dateParts[0];
        String day = dateParts[1].replace(",", "");
        String year = dateParts[2];

        int monthAsInt = getMonthAsInt(month);
        if (monthAsInt == 0) {
            return false;
        }

        if (!day.matches("\\d+")) {
            return false;
        }

        if (!year.matches("\\d+")) {
            return false;
        }

        // Check if the format matches "Month day, year"
        if (!date.matches("[A-Za-z]+ \\d{1,2}, \\d{4}")) {
            return false;
        }

        return true;
    }

    public static String formatDate(String date) {
        String[] dateParts = date.split(" ");

        String month = dateParts[0];
        String day = dateParts[1].replace(",", "");
        String year = dateParts[2];

        int monthAsInt = getMonthAsInt(month);

        return monthAsInt + "-" + day + "-" + year;
    }

    public static int getMonthAsInt(String month) {
        month = month.toLowerCase();

        switch (month) {
            case "january":
                return 1;
            case "february":
                return 2;
            case "march":
                return 3;
            case "april":
                return 4;
            case "may":
                return 5;
            case "june":
                return 6;
            case "july":
                return 7;
            case "august":
                return 8;
            case "september":
                return 9;
            case "october":
                return 10;
            case "november":
                return 11;
            case "december":
                return 12;
            default:
                return 0;
        }
    }
}
5.16 LAB: Print string in reverse

Write a program that takes in a line of text as input, and outputs that line of text in reverse. The program repeats, ending when the user enters "Done", "done", or "d" for the line of text.

Ex: If the input is:

Hello there
Hey
done
the output is:

ereht olleH
yeH

import java.util.Scanner;

public class LabProgram {
    public static void main(String[] args) {
        Scanner scnr = new Scanner(System.in);
        String input;

        do {
            input = scnr.nextLine();

            if (!input.equalsIgnoreCase("Done") && !input.equalsIgnoreCase("d")) {
                String reversedText = reverseText(input);
                System.out.println(reversedText);
            }
        } while (!input.equalsIgnoreCase("Done") && !input.equalsIgnoreCase("d"));
    }

    public static String reverseText(String text) {
        StringBuilder reversed = new StringBuilder();

        for (int i = text.length() - 1; i >= 0; i--) {
            reversed.append(text.charAt(i));
        }

        return reversed.toString();
    }
}
5.17 LAB: File name change

A photographer is organizing a photo collection about the national parks in the US and would like to annotate the information about each of the photos into a separate set of files. Write a program that reads the name of a text file containing a list of photo file names. The program then reads the photo file names from the text file, replaces the "_photo.jpg" portion of the file names with "_info.txt", and outputs the modified file names.

Assume the unchanged portion of the photo file names contains only letters and numbers, and the text file stores one photo file name per line. If the text file is empty, the program produces no output.

Ex: If the input of the program is:

ParkPhotos.txt
and the contents of ParkPhotos.txt are:

Acadia2003_photo.jpg
AmericanSamoa1989_photo.jpg
BlackCanyonoftheGunnison1983_photo.jpg
CarlsbadCaverns2010_photo.jpg
CraterLake1996_photo.jpg
GrandCanyon1996_photo.jpg
IndianaDunes1987_photo.jpg
LakeClark2009_photo.jpg
Redwood1980_photo.jpg
VirginIslands2007_photo.jpg
Voyageurs2006_photo.jpg
WrangellStElias1987_photo.jpg
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class LabProgram {
    public static void main(String[] args) {
        Scanner scnr = new Scanner(System.in);
        String fileName = scnr.nextLine();

        try {
            File file = new File(fileName);
            Scanner fileScanner = new Scanner(file);

            while (fileScanner.hasNextLine()) {
                String photoFileName = fileScanner.nextLine();
                String infoFileName = photoFileName.replaceAll("_photo\\.jpg$", "_info.txt");
                System.out.println(infoFileName);
            }

            fileScanner.close();
        } catch (FileNotFoundException e) {
            System.out.println("File not found: " + fileName);
        }
    }
}
