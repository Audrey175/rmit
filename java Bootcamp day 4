import java.util.Scanner;

public class StringChecker {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);
      String inputString;

          inputString = scnr.nextLine();

        boolean noDuplicates = true;

        if (inputString.length() == 2) {
            char firstChar = inputString.charAt(0);
            char secondChar = inputString.charAt(1);

            if ((Character.isAlphabetic(firstChar) && Character.isAlphabetic(secondChar))
                    && (Character.toLowerCase(firstChar) == Character.toLowerCase(secondChar))) {
                noDuplicates = false;
            } else if (firstChar == secondChar) {
                noDuplicates = false;
            }
        }
      if (noDuplicates) {
         System.out.println("Good string");
      }
      else {
         System.out.println("Bad string");
      }
   }
}
Day 1 outcome score:
Temperature Weighted Score 14.5 = 2
Rain Weighted Score 2 mm = 3
Humidity Weighted Score 46 = 2
Outcome Result: (2 * 3 ) + (3 * 2) + (2 * 1) = 14.0

Day 2 outcome score:
Temperature Weighted Score 15 = 3
Rain Weighted Score 2 mm = 3
Humidity Weighted Score 46 = 2
Outcome Result: (3 * 3 ) + (3 * 3) + (2 * 1) = 17.0
Example Input:
15 4 61
14 3 60
Please enter expected temperature, rain and humidity for Day 1:
Please enter expected temperature, rain and humidity for Day 2:

Outcome score day 1: 14.0
Outcome score day 2: 14.0
The best day to hold your event is: Day 1 or Day 2



import java.util.Scanner;

public class LabProgram {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);
      
     

        // Input for Day 1
        System.out.println("Please enter expected temperature, rain and humidity for Day 1:");
        double temp1 = scnr.nextDouble();
        int rain1 = scnr.nextInt();
        int humidity1 = scnr.nextInt();

        // Input for Day 2
        System.out.println("Please enter expected temperature, rain and humidity for Day 2:");
        double temp2 = scnr.nextDouble();
        int rain2 = scnr.nextInt();
        int humidity2 = scnr.nextInt();
        
        System.out.println();
        // Calculate outcome scores
        double outcomeScore1 = calculateOutcomeScore(temp1, rain1, humidity1);
        double outcomeScore2 = calculateOutcomeScore(temp2, rain2, humidity2);

        // Output outcome scores
        System.out.println("Outcome score day 1: " + outcomeScore1);
        System.out.println("Outcome score day 2: " + outcomeScore2);
         String bestDay;
        if (outcomeScore1 > outcomeScore2) {
            bestDay = "Day 1";
        } else if (outcomeScore2 > outcomeScore1) {
            bestDay = "Day 2";
        } else {
            bestDay = "Day 1 or Day 2";
        }

        // Output the best day
        System.out.println("The best day to hold your event is: " + bestDay);
    }

    public static double calculateOutcomeScore(double temperature, int rain, int humidity) {
        // Calculate weighted scores for each criterion
        double temperatureScore = getTemperatureScore(temperature) * 3;
        double rainScore = getRainScore(rain) * 2;
        double humidityScore = getHumidityScore(humidity) * 1;

        // Calculate the outcome score
        return temperatureScore + rainScore + humidityScore;
    }
    public static int getTemperatureScore(double temperature) {
        if (temperature >= 15 && temperature <= 25) {
            return 3;
        } else if (temperature < 15) {
            return 2;
        } else {
            return 1;
        }
    }

    public static int getRainScore(int rain) {
        if (rain >= 0 && rain <= 3) {
            return 3;
        } else if (rain >= 4 && rain <= 8) {
            return 2;
        } else {
            return 1;
        }
    }

    public static int getHumidityScore(int humidity) {
        if (humidity >= 0 && humidity <= 45) {
            return 3;
        } else if (humidity >= 46 && humidity <= 60) {
            return 2;
        } else {
            return 1;
        }
   }
}


A new game needs a 'league of champions' leader board to motivate and challenge users to play the game more often.
The program will take a user's score and determine which league the player should be placed in.
Input	A single input represents the game player's score.
Constraints	You can assume the following:
The user enters a single integer input.
Program Logic	There are four leagues in the game.
Each league has a minimum score and a maximum score that represents the range of scores that place a user in that league.
 	Bronze	Silver	Gold	Platinum
Score Range	500 - 999	1000 - 1999	2000 - 2999	3000 +

OUTPUT the league table
PROMPT the user for a score.
STORE the score.
DETERMINE the league based on the score.
OUTPUT a message indicating which league the player will be placed in based on their score.
If the score is less that 500, output the message "You have not yet made it into a league"
Output	Your program should output a summary table that shows the leagues and their score ranges.
The columns in the table must be 14 characters wide.
Example	Example Input:
231000

Example Output:
 	Bronze	Silver	Gold	Platinum
Score Range	500 - 999	1000 - 1999	2000 - 2999	3000 +

Please enter the user's score:
Congratulations you have made it into the Platinum league!!!
Note: You do not need to print out the borders of the table.


import java.util.Formatter;
import java.util.Scanner;

public class ProgramSummary {
    public static void main(String[] args) {
        // Define the league table
        String[] leagues = {"Bronze", "Silver", "Gold", "Platinum"};
        int[] minScores = {500, 1000, 2000, 3000};
        int[] maxScores = {999, 1999, 2999, Integer.MAX_VALUE};

        // Print the league table
        System.out.printf("%-14s%-14s%-14s%-14s%-14s%n", "", padString("Bronze", 14), padString("Silver", 14), padString("Gold", 14), padString("Platinum", 14));
        System.out.printf("%-14s%-14s%-14s%-14s%-14s%n", "Score Range", padString("500 - 999", 14), padString("1000 - 1999", 14), padString("2000 - 2999", 14), padString("3000 +", 14));
        System.out.println();
        // Prompt the user for a score
        Scanner scnr = new Scanner(System.in);
        System.out.println("Please enter the user's score:");
        int userScore = scnr.nextInt();

        // Determine the league for the user's score
        String userLeague = null;
        for (int i = 0; i < leagues.length; i++) {
            if (userScore >= minScores[i] && userScore <= maxScores[i]) {
                userLeague = leagues[i];
            }
            else if (  userScore < 500) {
               System.out.println("You have not yet made it into a league");
               break;
            }
        }

        // Output the user's league
        System.out.println("Congratulations you have made it into the " + userLeague + "!!!");
    }

    private static String padString(String str, int width) {
        Formatter fmt = new Formatter();
        fmt.format("%1$-" + width + "s", str);
        return fmt.toString();
    }
}




import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class LabProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt the user for the number of elements to be paired
       
        int rangeNum = scanner.nextInt();

        generateNumberPairs(rangeNum, scanner);
    }

    public static void generateNumberPairs(int rangeNum, Scanner scanner) {
        // Create a collection to hold 2 of each number in the range
        List<Integer> collection = new ArrayList<>();

        // Populate the collection with all the numbers including duplicates in ascending order
        for (int num = 1; num <= rangeNum; num++) {
            collection.add(num);
            collection.add(num);
        }

        // Print the table of numbers in the original order with a maximum of 5 numbers per row
        System.out.println("Please enter the number of elements to be paired.");
        System.out.println();
        printTable(collection);

        // Prompt the user for a seed number for testing purposes
        System.out.println("Please enter a seed number for testing purposes.");
        int seed = scanner.nextInt();

        // Set counter to maximum index of collection to track how many numbers have not been used
        int unusedNumbers = collection.size();

        // Seed a randomizer for testing purposes
        Random random = new Random(seed);

        // Iterate over the collection until all numbers have been used
        while (unusedNumbers > 0) {
            // Retrieve a random number (to be used as an index for retrieving a value from the original collection)
            int randomIndex = random.nextInt(collection.size());

            // If the number has not been used before
            if (collection.get(randomIndex) != 0) {
                // Print the value (not the number)
                System.out.printf("%4d", collection.get(randomIndex));

                // Set the corresponding element in the original collection to zero to mark as used
                collection.set(randomIndex, 0);

                // If a new line is required
                if (unusedNumbers % 5 == 0) {
                    System.out.println();
                }

                // Decrement unusedNumbers
                unusedNumbers--;
            }
        }
    }

    public static void printTable(List<Integer> collection) {
        for (int i = 0; i < collection.size(); i++) {
            System.out.printf("%4d", collection.get(i));
            if ((i + 1) % 5 == 0) {
                System.out.println();
            }
        }
    }
}
